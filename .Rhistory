}
download_fia_by_state <- function(stateAbb) {
# download PLOT table
message("downloading PLOT table")
plotUrl <- paste0("https://apps.fs.usda.gov/fia/datamart/CSV/", stateAbb, "_PLOT.zip")
plotZip <- paste0("/tmp/", stateAbb, "_PLOT.zip")
plotFile <- paste0("/tmp/", stateAbb, "_PLOT.csv")
if (!file.exists(plotFile)) {
download.file(plotUrl, destfile = plotZip)
system(paste0("cd /tmp; unzip ", stateAbb, "_PLOT.zip"))
}
# download SUBPLOT table
message("downloading SUBPLOT table")
subplotUrl <- paste0("https://apps.fs.usda.gov/fia/datamart/CSV/", stateAbb, "_SUBPLOT.zip")
subplotZip <- paste0("/tmp/", stateAbb, "_SUBPLOT.zip")
subplotFile <- paste0("/tmp/", stateAbb, "_SUBPLOT.csv")
if (!file.exists(subplotFile)) {
download.file(subplotUrl, destfile = subplotZip)
system(paste0("cd /tmp; unzip ", stateAbb, "_SUBPLOT.zip"))
}
# download TREE table
message("downloading TREE table")
treeUrl <- paste0("https://apps.fs.usda.gov/fia/datamart/CSV/", stateAbb, "_TREE.zip")
treeZip <- paste0("/tmp/", stateAbb, "_TREE.zip")
treeFile <- paste0("/tmp/", stateAbb, "_TREE.csv")
if (!file.exists(treeFile)) {
download.file(treeUrl, destfile = treeZip)
system(paste0("cd /tmp; unzip ", stateAbb, "_TREE.zip"))
}
# download COND table
message("downloading COND table")
condUrl <- paste0("https://apps.fs.usda.gov/fia/datamart/CSV/", stateAbb, "_COND.zip")
condZip <- paste0("/tmp/", stateAbb, "_COND.zip")
condFile <- paste0("/tmp/", stateAbb, "_COND.csv")
if (!file.exists(condFile)) {
download.file(condUrl, destfile = condZip)
system(paste0("cd /tmp; unzip ", stateAbb, "_COND.zip"))
}
# download SURVEY table
message("downloading SURVEY table")
surveyUrl <- paste0("https://apps.fs.usda.gov/fia/datamart/CSV/", stateAbb, "_SURVEY.zip")
surveyZip <- paste0("/tmp/", stateAbb, "_SURVEY.zip")
surveyFile <- paste0("/tmp/", stateAbb, "_SURVEY.csv")
if (!file.exists(surveyFile)) {
download.file(surveyUrl, destfile = surveyZip)
system(paste0("cd /tmp; unzip ", stateAbb, "_SURVEY.zip"))
}
outFiles <- list(
plotFile = plotFile,
subplotFile = subplotFile,
treeFile = treeFile,
condFile = condFile,
surveyFile = surveyFile
)
return(outFiles)
}
library(tsutils)
if(is.null(aoi)){
targetStates <- stateAbb
} else{
# identify states
targetStates <- us_states %>%
sf::st_transform(sf::st_crs(aoi)) %>%
sf::st_intersection(aoi) %>%
dplyr::pull(ABB)
}
# download tables
files <- purrr::map(
.x = targetStates,
.f = ~ tsutils::download_fia_by_state(state = .x)
)
# combine tables
fiaSurvey <- purrr::map(files, "surveyFile") %>%
vroom::vroom(
delim = ",",
col_types = vroom::cols(.default = "?", CN = "c")
)
from = 1998
to = Inf
fiaPlots <- purrr::map(files, "plotFile") %>%
vroom::vroom(
delim = ",",
col_types = vroom::cols(
.default = "?",
CN = "c",
PREV_PLT_CN = "c",
SRV_CN = "c"
)
) %>%
dplyr::filter(
KINDCD %in% c(1, 2),
PLOT_STATUS_CD == 1,
SRV_CN %in% fiaSurvey$CN,
INVYR != 9999,
MEASYEAR > from & MEASYEAR < to
)
head(fiaPlots)
head(fiaPlots$MEASYEAR)
single.condition = TRUE
disturbed.plots = FALSE
fiaCond <- purrr::map(files, "condFile") %>%
vroom::vroom(
delim = ",",
col_types = vroom::cols(
.default = "?",
PLT_CN = "c",
CN = "c"
)
) %>%
dplyr::filter(
PLT_CN %in% fiaPlots$CN,
if(single.condition == TRUE){
CONDPROP_UNADJ > 0.99 # single-condition
},
DSTRBCD1 == 0, # dropping disturbed plots for now
TRTCD1 == 0 # no stand treatment
) %>%
dplyr::group_by(PLT_CN) %>%
dplyr::mutate(count = n()) %>%
dplyr::ungroup() %>%
dplyr::filter(count == 1)
fiaCond <- purrr::map(files, "condFile") %>%
vroom::vroom(
delim = ",",
col_types = vroom::cols(
.default = "?",
PLT_CN = "c",
CN = "c"
)
) %>%
dplyr::filter(
PLT_CN %in% fiaPlots$CN,
if(single.condition == TRUE){
CONDPROP_UNADJ > 0.99 # single-condition
},
if(disturbed.plots == FALSE){
DSTRBCD1 == 0 # dropping disturbed plots for now
},
if(treated.plots == FALSE){
TRTCD1 == 0 # no stand treatment
}
) %>%
dplyr::group_by(PLT_CN) %>%
dplyr::mutate(count = n()) %>%
dplyr::ungroup() %>%
dplyr::filter(count == 1)
treated.plots = FALSE
fiaCond <- purrr::map(files, "condFile") %>%
vroom::vroom(
delim = ",",
col_types = vroom::cols(
.default = "?",
PLT_CN = "c",
CN = "c"
)
) %>%
dplyr::filter(
PLT_CN %in% fiaPlots$CN,
if(single.condition == TRUE){
CONDPROP_UNADJ > 0.99 # single-condition
},
if(disturbed.plots == FALSE){
DSTRBCD1 == 0 # dropping disturbed plots for now
},
if(treated.plots == FALSE){
TRTCD1 == 0 # no stand treatment
}
) %>%
dplyr::group_by(PLT_CN) %>%
dplyr::mutate(count = n()) %>%
dplyr::ungroup() %>%
dplyr::filter(count == 1)
fiaTrees <- purrr::map(files, "treeFile") %>%
vroom::vroom(
delim = ",",
col_types = vroom::cols(
.default = "?",
PLT_CN = "c",
CN = "c"
)
) %>%
dplyr::rename(
TREE_CN = CN
) %>%
dplyr::filter(
PLT_CN %in% fiaCond$PLT_CN,
PLT_CN %in% fiaPlots$CN
) %>%
dplyr::group_by(PLT_CN) %>%
dplyr::mutate(numSubplots = length(unique(SUBP))) %>%
dplyr::ungroup() %>%
dplyr::filter(numSubplots == 4)
plotFinalFilt <- fiaPlots %>%
dplyr::mutate(PREV_PLT_CN = as.character(PREV_PLT_CN)) %>%
dplyr::filter(CN %in% fiaTrees$PLT_CN)
condFinalFilt <- fiaCond %>%
dplyr::filter(PLT_CN %in% fiaTrees$PLT_CN)
# uniquely identify plots by location
plotMaster <- plotFinalFilt %>%
dplyr::select(
STATECD, UNITCD, COUNTYCD,
PLOT, CN, MEASYEAR,
LAT, LON, ELEV
) %>%
unite(
"fiaPlotID",
c("STATECD", "UNITCD", "COUNTYCD", "PLOT"),
sep = "_"
)
plotLocs <- plotMaster %>%
dplyr::select(fiaPlotID, LON, LAT, ELEV) %>%
dplyr::distinct() %>%
sf::st_as_sf(
coords = c("LON", "LAT"),
crs = 4326,
remove = FALSE
) %>%
sf::st_intersection(aoi %>% sf::st_transform(4326))
geography_plot <- ggplot() +
geom_sf(
data = aoi,
size = 0.5,
color = "black",
alpha = 0
) +
geom_sf(
data = plotLocs,
color = "black",
alpha = 1
) +
theme_bw() +
coord_sf() +
ggtitle("FIA plot distribution")
tidy_fia <- function(stateAbb, aoi=NULL,
from = 1998, to = Inf,
single.condition = TRUE,
disturbed.plots = FALSE, treated.plots = FALSE) {
if(is.null(aoi)){
targetStates <- stateAbb
} else{
# identify states
targetStates <- us_states %>%
sf::st_transform(sf::st_crs(aoi)) %>%
sf::st_intersection(aoi) %>%
dplyr::pull(ABB)
}
# download tables
files <- purrr::map(
.x = targetStates,
.f = ~ tsutils::download_fia_by_state(state = .x)
)
# combine tables
fiaSurvey <- purrr::map(files, "surveyFile") %>%
vroom::vroom(
delim = ",",
col_types = vroom::cols(.default = "?", CN = "c")
)
fiaPlots <- purrr::map(files, "plotFile") %>%
vroom::vroom(
delim = ",",
col_types = vroom::cols(
.default = "?",
CN = "c",
PREV_PLT_CN = "c",
SRV_CN = "c"
)
) %>%
dplyr::filter(
KINDCD %in% c(1, 2),
PLOT_STATUS_CD == 1,
SRV_CN %in% fiaSurvey$CN,
INVYR != 9999,
INVYR > from & INVYR < to
)
fiaCond <- purrr::map(files, "condFile") %>%
vroom::vroom(
delim = ",",
col_types = vroom::cols(
.default = "?",
PLT_CN = "c",
CN = "c"
)
) %>%
dplyr::filter(
PLT_CN %in% fiaPlots$CN,
if(single.condition == TRUE){
CONDPROP_UNADJ > 0.99 # single-condition
},
if(disturbed.plots == FALSE){
DSTRBCD1 == 0 # dropping disturbed plots for now
},
if(treated.plots == FALSE){
TRTCD1 == 0 # no stand treatment
}
) %>%
dplyr::group_by(PLT_CN) %>%
dplyr::mutate(count = n()) %>%
dplyr::ungroup() %>%
dplyr::filter(count == 1)
fiaTrees <- purrr::map(files, "treeFile") %>%
vroom::vroom(
delim = ",",
col_types = vroom::cols(
.default = "?",
PLT_CN = "c",
CN = "c"
)
) %>%
dplyr::rename(
TREE_CN = CN
) %>%
dplyr::filter(
PLT_CN %in% fiaCond$PLT_CN,
PLT_CN %in% fiaPlots$CN
) %>%
dplyr::group_by(PLT_CN) %>%
dplyr::mutate(numSubplots = length(unique(SUBP))) %>%
dplyr::ungroup() %>%
dplyr::filter(numSubplots == 4)
plotFinalFilt <- fiaPlots %>%
dplyr::mutate(PREV_PLT_CN = as.character(PREV_PLT_CN)) %>%
dplyr::filter(CN %in% fiaTrees$PLT_CN)
condFinalFilt <- fiaCond %>%
dplyr::filter(PLT_CN %in% fiaTrees$PLT_CN)
# uniquely identify plots by location
plotMaster <- plotFinalFilt %>%
dplyr::select(
STATECD, UNITCD, COUNTYCD,
PLOT, CN, MEASYEAR,
LAT, LON, ELEV
) %>%
unite(
"fiaPlotID",
c("STATECD", "UNITCD", "COUNTYCD", "PLOT"),
sep = "_"
)
plotLocs <- plotMaster %>%
dplyr::select(fiaPlotID, LON, LAT, ELEV) %>%
dplyr::distinct() %>%
sf::st_as_sf(
coords = c("LON", "LAT"),
crs = 4326,
remove = FALSE
) %>%
sf::st_intersection(aoi %>% sf::st_transform(4326))
geography_plot <- ggplot() +
geom_sf(
data = aoi,
size = 0.5,
color = "black",
alpha = 0
) +
geom_sf(
data = plotLocs,
color = "black",
alpha = 1
) +
theme_bw() +
coord_sf() +
ggtitle("FIA plot distribution")
out <- list(
treeTable = fiaTrees,
plotTable = plotFinalFilt,
condTable = condFinalFilt,
surveyTable = surveyTable,
geography_plot = geography_plot
)
return(out)
}
fiaTables <- tidy_fia(aoi = ecoreg, from = 2000)
tidy_fia <- function(stateAbb, aoi=NULL,
from = 1998, to = Inf,
single.condition = TRUE,
disturbed.plots = FALSE, treated.plots = FALSE) {
if(is.null(aoi)){
targetStates <- stateAbb
} else{
# identify states
targetStates <- us_states %>%
sf::st_transform(sf::st_crs(aoi)) %>%
sf::st_intersection(aoi) %>%
dplyr::pull(ABB)
}
# download tables
files <- purrr::map(
.x = targetStates,
.f = ~ tsutils::download_fia_by_state(state = .x)
)
# combine tables
fiaSurvey <- purrr::map(files, "surveyFile") %>%
vroom::vroom(
delim = ",",
col_types = vroom::cols(.default = "?", CN = "c")
)
fiaPlots <- purrr::map(files, "plotFile") %>%
vroom::vroom(
delim = ",",
col_types = vroom::cols(
.default = "?",
CN = "c",
PREV_PLT_CN = "c",
SRV_CN = "c"
)
) %>%
dplyr::filter(
KINDCD %in% c(1, 2),
PLOT_STATUS_CD == 1,
SRV_CN %in% fiaSurvey$CN,
INVYR != 9999,
INVYR > from & INVYR < to
)
fiaCond <- purrr::map(files, "condFile") %>%
vroom::vroom(
delim = ",",
col_types = vroom::cols(
.default = "?",
PLT_CN = "c",
CN = "c"
)
) %>%
dplyr::filter(
PLT_CN %in% fiaPlots$CN,
if(single.condition == TRUE){
CONDPROP_UNADJ > 0.99 # single-condition
},
if(disturbed.plots == FALSE){
DSTRBCD1 == 0 # dropping disturbed plots for now
},
if(treated.plots == FALSE){
TRTCD1 == 0 # no stand treatment
}
) %>%
dplyr::group_by(PLT_CN) %>%
dplyr::mutate(count = n()) %>%
dplyr::ungroup() %>%
dplyr::filter(count == 1)
fiaTrees <- purrr::map(files, "treeFile") %>%
vroom::vroom(
delim = ",",
col_types = vroom::cols(
.default = "?",
PLT_CN = "c",
CN = "c"
)
) %>%
dplyr::rename(
TREE_CN = CN
) %>%
dplyr::filter(
PLT_CN %in% fiaCond$PLT_CN,
PLT_CN %in% fiaPlots$CN
) %>%
dplyr::group_by(PLT_CN) %>%
dplyr::mutate(numSubplots = length(unique(SUBP))) %>%
dplyr::ungroup() %>%
dplyr::filter(numSubplots == 4)
plotFinalFilt <- fiaPlots %>%
dplyr::mutate(PREV_PLT_CN = as.character(PREV_PLT_CN)) %>%
dplyr::filter(CN %in% fiaTrees$PLT_CN)
condFinalFilt <- fiaCond %>%
dplyr::filter(PLT_CN %in% fiaTrees$PLT_CN)
# uniquely identify plots by location
plotMaster <- plotFinalFilt %>%
dplyr::select(
STATECD, UNITCD, COUNTYCD,
PLOT, CN, MEASYEAR,
LAT, LON, ELEV
) %>%
unite(
"fiaPlotID",
c("STATECD", "UNITCD", "COUNTYCD", "PLOT"),
sep = "_"
)
plotLocs <- plotMaster %>%
dplyr::select(fiaPlotID, LON, LAT, ELEV) %>%
dplyr::distinct() %>%
sf::st_as_sf(
coords = c("LON", "LAT"),
crs = 4326,
remove = FALSE
) %>%
sf::st_intersection(aoi %>% sf::st_transform(4326))
geography_plot <- ggplot() +
geom_sf(
data = aoi,
size = 0.5,
color = "black",
alpha = 0
) +
geom_sf(
data = plotLocs,
color = "black",
alpha = 1
) +
theme_bw() +
coord_sf() +
ggtitle("FIA plot distribution")
out <- list(
treeTable = fiaTrees,
plotTable = plotFinalFilt,
condTable = condFinalFilt,
surveyTable = fiaSurvey,
geography_plot = geography_plot
)
return(out)
}
fiaTables <- tidy_fia(aoi = ecoreg, from = 2000)
st_sp2[st_sp2$common == 'longleaf pine',]
st_sp2[st_sp2$common == 'sand pine',]
head(fiaTables$treeTable)
head(fiaTables$plotTable)
st_sp2[st_sp2$stID == 228,]
